name: trivy-operator
serviceType: managed


# -- global values provide a centralized configuration for 'image.registry', reducing the potential for errors.
# If left blank, the chart will default to the individually set 'image.registry' values
global:
  image:
    registry: "gsoci.azurecr.io"
  podSecurityStandards:
    enforced: false

image:
  registry: "gsoci.azurecr.io"

# Enable trivy-operator network policy.
networkPolicy:
  enabled: true

# Enable additional equivalent policy for clusters using cilium.
ciliumNetworkPolicy:
  enabled: true

# Must match the value in trivy-operator.trivy.serverURL.
# These should be templated in properly when possible.
trivyServiceName: trivy
trivyServicePort: 4954

verticalPodAutoscaler:
  trivyOperator:
    enabled: true
    containerPolicies: {}

trivy-operator:

  compliance:
    cron: "* */6 * * *"
    reportType: summary

  operator:
    # Disable capabilities by default
    # -- the flag to enable sbom generation
    sbomGenerationEnabled: false
    # configAuditScannerEnabled the flag to enable configuration audit scanner
    configAuditScannerEnabled: false
    # rbacAssessmentScannerEnabled the flag to enable rbac assessment scanner
    rbacAssessmentScannerEnabled: false
    # infraAssessmentScannerEnabled the flag to enable infra assessment scanner
    infraAssessmentScannerEnabled: false
    # clusterComplianceEnabled the flag to enable cluster compliance scanner
    clusterComplianceEnabled: false
    # exposedSecretScannerEnabled the flag to enable exposed secret scanner
    exposedSecretScannerEnabled: false
    # Reports are automatically deleted after this duration, causing a re-scan. Empty = never delete.
    scannerReportTTL: "168h"  # 7 days
    # Generate reports for only the currently-deployed version of a replicaset.
    vulnerabilityScannerScanOnlyCurrentRevisions: true
    # scanJobsConcurrentLimit the maximum number of scan jobs create by the operator
    scanJobsConcurrentLimit: 10
    # scanJobsRetryDelay the duration to wait before retrying a failed scan job
    scanJobsRetryDelay: 30s

  image:
    repository: "giantswarm/trivy-operator"

  excludeNamespaces: ""

  targetNamespaces: ""

  nodeCollector:
    repository: "giantswarm/node-collector"

  tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"

  service:
    metricsPort: 8080

  serviceMonitor:
    enabled: true
    interval: "60s"
    labels:
      application.giantswarm.io/team: shield

  trivyOperator:

    scanJobTolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"

    # scanJobPodTemplatePodSecurityContext podSecurityContext the user wants the scanner pods to be amended with.
    # Example:
    #   RunAsUser: 10000
    #   RunAsGroup: 10000
    #   RunAsNonRoot: true
    scanJobPodTemplatePodSecurityContext:
      runAsUser: 10000
      runAsGroup: 10000
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault

    scanJobPodTemplateContainerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 10000
      runAsGroup: 10000
      seccompProfile:
        type: RuntimeDefault

  # Pod securityContext
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 10000  # UID of `trivyoperator` user from upstream.
    runAsGroup: 10000  # UID of `trivyoperator` user from upstream
    seccompProfile:
      type: RuntimeDefault

  # Container securityContext
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 10000  # UID of `trivyoperator` user from upstream.
    runAsGroup: 10000  # UID of `trivyoperator` user from upstream
    seccompProfile:
      type: RuntimeDefault

  serviceAccount:
    # We set the service account name so that we can use it in our FlowSchema.
    name: "trivy-operator"

  trivy:
    command: filesystem
    # Ideally, we use the in-cluster Trivy deployed from https://github.com/giantswarm/trivy-app
    # We also set the image here so that trivy-operator can be deployed "standalone",
    # but this image is not used if using in-cluster Trivy.
    # Change or remove the `mode:` setting to let trivy-operator pull its own Trivy images.
    image:
      repository: "giantswarm/trivy"
    mode: ClientServer
    serverURL: http://trivy:4954
    # Resources for Trivy pods created by trivy-operator
    resources:
      requests:
        cpu: 100m
        memory: 100M
      limits:
        cpu: 500m
        memory: 1G

# We install CRDs through a Job with the helm specific crd folder.
crds:
  image:
    tag: 1.24.1
  install: true
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Upstream offers compliance specs which can be optionally installed.
specs:
  image:
    tag: 1.24.1
  install: false
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Security contexts for CRD and spec installs.
# Pod securityContext
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10000
  runAsGroup: 10000
  seccompProfile:
    type: RuntimeDefault

# Container securityContext
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  privileged: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10000
  runAsGroup: 10000
  seccompProfile:
    type: RuntimeDefault

kyvernoPolicyExceptions:
  enabled: true
  namespace: giantswarm

# managedBy is similar to .Release.Service but allows to overwrite the value
managedBy: Helm
