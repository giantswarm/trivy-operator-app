name: trivy-operator
serviceType: managed

image:
  registry: docker.io

# PSP is not supported upstream anymore, but we can create our own.
rbac:
  pspEnabled: true

trivy-operator:

  operator:
    # Reports are automatically deleted after this duration, causing a re-scan. Empty = never delete.
    vulnerabilityScannerReportTTL: "168h"  # 7 days
    # Generate reports for only the currently-deployed version of a replicaset.
    vulnerabilityScannerScanOnlyCurrentRevisions: true
    # scanJobsConcurrentLimit the maximum number of scan jobs create by the operator
    scanJobsConcurrentLimit: 10
    # scanJobsRetryDelay the duration to wait before retrying a failed scan job
    scanJobsRetryDelay: 30s

  image:
    repository: "docker.io/giantswarm/trivy-operator"

  targetNamespaces: ""

  trivyOperator:
    # scanJobPodTemplateSecurityContext podSecurityContext the user wants the scanner pods to be amended with.
    # Example:
    #   RunAsUser: 10000
    #   RunAsGroup: 10000
    #   RunAsNonRoot: true
    scanJobPodTemplateSecurityContext:
      runAsUser: 10000
      runAsGroup: 10000
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    
    scanJobPodTemplateContainerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 10000
      runAsGroup: 10000
      seccompProfile:
        type: RuntimeDefault

  # Pod securityContext
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 10000  # UID of `trivyoperator` user from upstream.
    runAsGroup: 10000  # UID of `trivyoperator` user from upstream
    seccompProfile:
      type: RuntimeDefault

  # Container securityContext
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 10000  # UID of `trivyoperator` user from upstream.
    runAsGroup: 10000  # UID of `trivyoperator` user from upstream
    seccompProfile:
      type: RuntimeDefault

  serviceAccount:
    # We set the service account name so that we can use it in our FlowSchema.
    name: "trivy-operator"

  trivy:
    # Ideally, we use the in-cluster Trivy deployed from https://github.com/giantswarm/trivy-app
    # We also set the image here so that trivy-operator can be deployed "standalone",
    # but this image is not used if using in-cluster Trivy.
    # Change or remove the `mode:` setting to let trivy-operator pull its own Trivy images.
    imageRef: docker.io/giantswarm/trivy:0.30.4
    mode: ClientServer
    serverURL: "http://trivy-app:4954"
    # Resources for Trivy pods created by trivy-operator
    resources:
      requests:
        cpu: 100m
        memory: 100M
      limits:
        cpu: 500m
        memory: 1G

  polaris:
    imageRef: docker.io/giantswarm/polaris:4.0

  conftest:
    imageRef: docker.io/giantswarm/conftest:v0.25.0

  aqua:
    imageRef: giantswarm/scanner:5.3

# We install CRDs through a Job with the helm specific crd folder.
crds:
  image:
    tag: 1.24.1
  install: true
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Upstream offers compliance specs which can be optionally installed.
specs:
  image:
    tag: 1.24.1
  install: false
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Security contexts for CRD and spec installs.
# Pod securityContext
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10000
  runAsGroup: 10000
  seccompProfile:
    type: RuntimeDefault

# Container securityContext
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  privileged: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10000
  runAsGroup: 10000
  seccompProfile:
    type: RuntimeDefault

# managedBy is similar to .Release.Service but allows to overwrite the value
managedBy: Helm
